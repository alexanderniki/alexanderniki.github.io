<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>alexanderniki.name</title><link href="https://www.alexanderniki.name/" rel="alternate"></link><link href="https://www.alexanderniki.name/feeds/all.atom.xml" rel="self"></link><id>https://www.alexanderniki.name/</id><updated>2019-08-25T16:15:00+03:00</updated><subtitle>alexanderniki</subtitle><entry><title>Python3 cheat sheet</title><link href="https://www.alexanderniki.name/articles/python3-cheat-sheet.html" rel="alternate"></link><published>2019-08-25T16:10:00+03:00</published><updated>2019-08-25T16:15:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2019-08-25:/articles/python3-cheat-sheet.html</id><summary type="html">&lt;p&gt;Updatable python3 cheat sheet&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Style&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Variables&lt;/span&gt;

&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;my_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;my_other_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# Functions&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;work&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_something_else&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Classes&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Variables&lt;/h2&gt;
&lt;h3&gt;Declaration&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="c1"&gt;# integer&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;       &lt;span class="c1"&gt;# float&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2j&lt;/span&gt;    &lt;span class="c1"&gt;# complex number (a + bi)&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# string&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;      &lt;span class="c1"&gt;# boolean (True / False)&lt;/span&gt;

&lt;span class="c1"&gt;# With type hints (3.6+)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2j&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Falsy and empty values&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Type convertion&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Strings&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Formatted strings&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{first} {last}&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Escape sequences&lt;/span&gt;
\&lt;span class="s2"&gt;&amp;quot; \â€™ &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;

&lt;span class="c1"&gt;# String methods&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Control flow&lt;/h2&gt;
&lt;h3&gt;Conditional statements&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Ternary operator &lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Chaining comparison operators&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Loops&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Functions&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;

&lt;span class="c1"&gt;# Keyword arguments &lt;/span&gt;
&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Variable number of arguments &lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Variable number of keyword arguments &lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;save_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# With type hints (3.6+)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# When the function returns nothing&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Exceptions&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Handling Exceptions &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;ZeroDivisionError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;do_something_else&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# no exceptions raised&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# cleanup code&lt;/span&gt;

&lt;span class="c1"&gt;# Raising exceptions&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# The with statement &lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Classes&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="c1"&gt;# Instance and class attributes&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;default_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;


&lt;span class="c1"&gt;# Instance and class methods&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Private members &lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;


&lt;span class="c1"&gt;# Properties &lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt;

    &lt;span class="nd"&gt;@x.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;


&lt;span class="c1"&gt;# Inheritance&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="c1"&gt;# Multiple inheritance &lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FlyingFish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Flyer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Swimmer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="python3"></category></entry><entry><title>Journee - simple crossplatform journal/diary app</title><link href="https://www.alexanderniki.name/articles/journee-diary-app.html" rel="alternate"></link><published>2019-04-21T13:30:00+03:00</published><updated>2019-04-21T13:40:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2019-04-21:/articles/journee-diary-app.html</id><summary type="html">&lt;p&gt;Crossplatrofm electron based diary&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;Sometimes writing diaries could be very useful. Dumping thoughts, learning new languages, analyzing your own life or just jotting down daily things. That's where some kind of journal could be really handy.&lt;/p&gt;
&lt;p&gt;I tried number of different tools and approaches.&lt;/p&gt;
&lt;p&gt;These were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plain text files&lt;/li&gt;
&lt;li&gt;markdown files&lt;/li&gt;
&lt;li&gt;Zim with calendar plugin&lt;/li&gt;
&lt;li&gt;RedNotebook app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally I found Journee - very simple, yet nice tool. And I decided to give it a try.&lt;/p&gt;
&lt;h2&gt;About the app&lt;/h2&gt;
&lt;p&gt;Journee is just a simple opensource journal/diary app.&lt;/p&gt;
&lt;p&gt;It is written with Electron/JS and avalable for both Linux and Windows OSes.&lt;/p&gt;
&lt;p&gt;Official website: &lt;a href="https://adueck.github.io/journee/"&gt;https://adueck.github.io/journee/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Journee stores its data in plain text files in your filesystem. So you could easily sync it between computers with Dropbox, Google Drive, etc.&lt;/p&gt;
&lt;h2&gt;Using Journee&lt;/h2&gt;
&lt;p&gt;Basically, the app consists of only one screen: plain text editor and calendar widget.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Journee main screen" src="images/journee-diary-app-1.png"&gt;&lt;/p&gt;
&lt;p&gt;At the very first start, app will ask you where you want to store your data. Select anny folder and continue.&lt;/p&gt;
&lt;p&gt;And that's all! Click on any day and start writing.&lt;/p&gt;
&lt;p&gt;You'll find you diary entries in prevously selected folder. One for each day. The app names files like yyyy-mm-dd.txt.&lt;/p&gt;
&lt;p&gt;Journee allows one to search in diary. Type a word and you'll see the results.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Journee search screen" src="images/journee-diary-app-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Good. Simple.&lt;/p&gt;
&lt;h2&gt;Quick summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simple&lt;/li&gt;
&lt;li&gt;crossplatform&lt;/li&gt;
&lt;li&gt;opensource&lt;/li&gt;
&lt;li&gt;based on plain text files&lt;/li&gt;
&lt;li&gt;search function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bad&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no autosave&lt;/li&gt;
&lt;li&gt;quite heavyweight ("thanks" to Electron)&lt;/li&gt;
&lt;li&gt;poor settings: only font size and storage folder&lt;/li&gt;
&lt;li&gt;no tray icon&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Outro&lt;/h2&gt;
&lt;p&gt;Journee seems to be a good app. I definitely will give it a try.&lt;/p&gt;</content><category term="opensource"></category><category term="app"></category><category term="gtd"></category></entry><entry><title>Making websites</title><link href="https://www.alexanderniki.name/articles/web-design-guide.html" rel="alternate"></link><published>2018-09-06T23:10:00+03:00</published><updated>2018-09-06T23:20:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2018-09-06:/articles/web-design-guide.html</id><summary type="html">&lt;p&gt;Small ironic article about how to make bullshit-free websites&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Whats the matter?&lt;/h2&gt;
&lt;p&gt;Take a look at a typical website built in 2018. What would you see? Yep: tons of CSS code and heavyweight JavaScript frameworks. Why? Because of very important reasons - new fancy menu or something... &lt;/p&gt;
&lt;p&gt;Today, we forgot that a website is just a, hmm, a website! A page connected to other pages and intended to give some piece of information about something.&lt;/p&gt;
&lt;h2&gt;OK, I want to do fast, beautiful and useful websites&lt;/h2&gt;
&lt;p&gt;What should I do? The answer is in following four links placed below.&lt;/p&gt;
&lt;p&gt;First of all, read this: &lt;a href="http://motherfuckingwebsite.com/"&gt;http://motherfuckingwebsite.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second, read this: &lt;a href="http://bettermotherfuckingwebsite.com/"&gt;http://bettermotherfuckingwebsite.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, take a look here: &lt;a href="https://thebestmotherfucking.website/"&gt;https://thebestmotherfucking.website/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And finally, follow the instruction: &lt;a href="https://jgthms.com/web-design-in-4-minutes/"&gt;https://jgthms.com/web-design-in-4-minutes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That's all! It's that simple :)&lt;/p&gt;</content><category term="web"></category><category term="design"></category><category term="howto"></category><category term="irony"></category></entry><entry><title>10 useful Brackets extensions for IT generalist</title><link href="https://www.alexanderniki.name/articles/brackets-extensions-list.html" rel="alternate"></link><published>2018-03-19T00:30:00+03:00</published><updated>2018-03-19T00:30:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2018-03-19:/articles/brackets-extensions-list.html</id><summary type="html">&lt;p&gt;A list of useful Abobe Brackets extensions for IT generalist.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Brackets editor&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://brackets.io/"&gt;Brackets&lt;/a&gt; is an open-source advanced text editor from Adobe Inc. It is written in HTML, CSS, and JS and licensed under MIT license. Brackets is available for downloading on Mac, Windows, and Linux.&lt;/p&gt;
&lt;p&gt;I like the editor and use it in my everyday life and work. By default, there are no specific extensions installed and you can use the app just like any other basic text editor.&lt;/p&gt;
&lt;p&gt;Fortunately, Brackets has many extensions, which could make your life easier and more comfortable.&lt;/p&gt;
&lt;p&gt;In this article I'll list some of my favorive extensions. These are very useful for IT generalists like analysts, technical writers or qa engineers. If you are a developer, it's more likely that you would use other, more specific tools (Idea, PyCharm and so on).&lt;/p&gt;
&lt;p&gt;OK, here goes the list!&lt;/p&gt;
&lt;h2&gt;Basic editing and writing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Brackets markdown preview&lt;br&gt;
  With this extension you can switch between normal editing mode and &lt;a href="https://daringfireball.net/projects/markdown/"&gt;markdown&lt;/a&gt; preview mode.&lt;/li&gt;
&lt;li&gt;Word count&lt;br&gt;
  Adds counter to the statusbar. Normally, counts all the words in your document. But if you select some text, you'll see amount of words in it.&lt;/li&gt;
&lt;li&gt;Selected char counter&lt;br&gt;
  Like previous one, this extension "lives" in editors's statusbar and shows amount of chars in selected text.&lt;/li&gt;
&lt;li&gt;Autosave every edit!&lt;br&gt;
  It does exactly one thing - automatically saves your file by customizable timeout. I set 900ms and it seems convenient.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Development&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Emmet&lt;br&gt;
  Well-known &lt;a href="https://emmet.io/"&gt;thing&lt;/a&gt;. Must have. Just must have if you do a lot of HTML - dramatically improves your productivity.&lt;/li&gt;
&lt;li&gt;Color highlighter&lt;br&gt;
  Highlights colors in CSS and some other style files (like SCSS, SASS ant so on). Very useful thing.&lt;/li&gt;
&lt;li&gt;Indent guides&lt;br&gt;
  Shows vertical guides helping you to navigate and see the structude of a file. Especially good fo coding and for writing some lists.&lt;/li&gt;
&lt;li&gt;Brackets python tools&lt;br&gt;
  Just some usefull tools if you write in python. Improves linting, autocompletion and documenting&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Others:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beautify&lt;br&gt;
  HTML, XML, JSON, CSS and many more - this extension makes bad document look good and readable.&lt;/li&gt;
&lt;li&gt;Brackets Preferences&lt;br&gt;
  Covenient way to edit brackets preferences with normal GUI dialog, not via built-in JSON file.&lt;/li&gt;
&lt;/ul&gt;</content><category term="adobe"></category><category term="brackets"></category><category term="list"></category></entry><entry><title>apiblueprint.org: a good thing for working with REST APIs</title><link href="https://www.alexanderniki.name/articles/api-blueprint.html" rel="alternate"></link><published>2017-12-08T23:10:00+03:00</published><updated>2017-12-08T23:20:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2017-12-08:/articles/api-blueprint.html</id><summary type="html">&lt;p&gt;Small markdown-based REST API description "language"&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Apiblueprint&lt;/h2&gt;
&lt;p&gt;Apiblueprint is a small markdown-based "language" for people who work with REST APIs.
By saying "language" I mean a specification and a set of rules intended for documatating REST APIs.&lt;/p&gt;
&lt;p&gt;Using apiblueprint rules makes it really easy to read and write API documentation in a standard way. Looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# GET /message
+ Response 200 (text/plain)

        Hello World!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take a look at it here: &lt;a href="https://apiblueprint.org"&gt;apiblueprint.org&lt;/a&gt;&lt;/p&gt;</content><category term="rest"></category><category term="api"></category><category term="markdown"></category><category term="blueprint"></category></entry><entry><title>Easy multiple image processing with GIMP</title><link href="https://www.alexanderniki.name/articles/design-gimp-batch-gui.html" rel="alternate"></link><published>2017-12-01T19:30:00+03:00</published><updated>2017-12-01T19:40:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2017-12-01:/articles/design-gimp-batch-gui.html</id><summary type="html">&lt;p&gt;GUI plugin for easy batch image processing with GIMP&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you work with GIMP and need to process many images, take a look at BIMP - &lt;strong&gt;B&lt;/strong&gt;atch &lt;strong&gt;I&lt;/strong&gt;mage &lt;strong&gt;M&lt;/strong&gt;anipulation &lt;strong&gt;P&lt;/strong&gt;lugin for GIMP.&lt;/p&gt;
&lt;p&gt;It's a plugin, that allows you to select many images and apply one or many tranformations to all lf them. &lt;/p&gt;
&lt;p&gt;Go to &lt;a href="https://alessandrofrancesconi.it/projects/bimp/"&gt;BIMP page&lt;/a&gt; and download the plugin for your OS. Install a plugin on GIMP. After that, you'll find "Batch Image Manipulation..." inside the "File" menu. &lt;/p&gt;
&lt;p&gt;&lt;img alt="BIMP main window" src="images/bimp-main.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Load your images, select transformation(s) and output directory and press "Apply". BIMP will process all the selected images.&lt;/p&gt;</content><category term="gimp"></category><category term="batch"></category><category term="ui"></category></entry><entry><title>asoftmurmur.com: ambient sounds for work</title><link href="https://www.alexanderniki.name/articles/link-ambient-sounds-asoftmurmur.html" rel="alternate"></link><published>2017-11-28T12:40:00+03:00</published><updated>2017-11-25T12:50:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2017-11-28:/articles/link-ambient-sounds-asoftmurmur.html</id><summary type="html">&lt;p&gt;A website and mobile app with adjustable ambient sounds&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many people work with music playing in the background. But sometimes music could distract you even more.&lt;/p&gt;
&lt;p&gt;The web site &lt;a href="https://asoftmurmur.com/"&gt;asoftmurmur.com&lt;/a&gt; provides ambient sounds collection like rain, wind and cafe and ability to mix them. Try it when you need to stay focused and cut out all external noises.&lt;/p&gt;</content><category term="ambient"></category><category term="work"></category></entry><entry><title>Case-insensitive tab-completion in bash</title><link href="https://www.alexanderniki.name/articles/bash-case-insensitive.html" rel="alternate"></link><published>2017-11-25T21:30:00+03:00</published><updated>2017-11-25T21:40:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2017-11-25:/articles/bash-case-insensitive.html</id><summary type="html">&lt;p&gt;How to make your bash's tab-completion case-insensitive&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Instruction&lt;/h2&gt;
&lt;p&gt;Making your bash's tab-completion case-insensitive is extremely easy.&lt;/p&gt;
&lt;p&gt;Create a file named .inputrc in your home directory. &lt;/p&gt;
&lt;p&gt;After that, place this line in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set completion-ignore-case on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all basically! Open a new shell and try it out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;. Keep in mind, that this will prevent bash from reading the defaults from /etc/inputrc, breaking things like navigation with ctrl-left/right. &lt;/p&gt;
&lt;p&gt;To avoid this make sure to add $include /etc/inputrc in your ~/.inputrc&lt;/p&gt;
&lt;h2&gt;Extra feature&lt;/h2&gt;
&lt;p&gt;You can make tab completion of file and directory names a little easier by adding in your ~/.inputrc the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set show-all-if-ambiguous on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes it unnecessary to press Tab twice when there is more than one match.&lt;/p&gt;</content><category term="linux"></category><category term="bash"></category><category term="howto"></category></entry><entry><title>Enable colors in Mercurial (HG)</title><link href="https://www.alexanderniki.name/articles/hg-enable-colors.html" rel="alternate"></link><published>2017-11-23T23:45:00+03:00</published><updated>2017-11-23T23:50:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2017-11-23:/articles/hg-enable-colors.html</id><summary type="html">&lt;p&gt;How to enable colors in Mercurial console output&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What is it&lt;/h2&gt;
&lt;p&gt;ColorExtension - is a &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt; extetsion that allows you to highlight some information in console output. The extension ships with Mercurial so there is no need to install it separately.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To enable ColorExtension, open your hgrc file and add "color=" to "extensions" section. Like that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[extensions]&lt;/span&gt;
&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To override current colors, add "colors" section with color definitions to your hgrc. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[color]&lt;/span&gt;
&lt;span class="na"&gt;status.modified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;blue bold underline red_background&lt;/span&gt;
&lt;span class="na"&gt;status.added&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;green bold&lt;/span&gt;
&lt;span class="na"&gt;status.removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;red bold blue_background&lt;/span&gt;
&lt;span class="na"&gt;status.deleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;cyan bold underline&lt;/span&gt;
&lt;span class="na"&gt;status.unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;magenta bold underline&lt;/span&gt;
&lt;span class="na"&gt;status.ignored&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;black bold&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can override colors for other states and actions in the same way.&lt;/p&gt;
&lt;p&gt;If you want to switch some colors off, place "none" in the config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;status.clean = none
status.copied = none
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Default color scheme lives &lt;a href="https://selenic.com/repo/hg-stable/file/436cc9d017c6/hgext/color.py"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="mercurial"></category><category term="hg"></category><category term="howto"></category></entry><entry><title>Typical screen sizes and aspect ratios</title><link href="https://www.alexanderniki.name/articles/screens-sizes-ratios.html" rel="alternate"></link><published>2017-11-20T23:00:00+03:00</published><updated>2017-12-28T11:45:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2017-11-20:/articles/screens-sizes-ratios.html</id><summary type="html">&lt;p&gt;A list of typical screen sizes and aspect ratios&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Wide 16:9&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;16:9 = 1.777&lt;/li&gt;
&lt;li&gt;3840 x 2160 = 1.777&lt;/li&gt;
&lt;li&gt;2560 x 1440 = 1.777&lt;/li&gt;
&lt;li&gt;1920 x 1080 = 1.777&lt;/li&gt;
&lt;li&gt;1600 x x900 = 1.777&lt;/li&gt;
&lt;li&gt;1366 x x768 = 1.778&lt;/li&gt;
&lt;li&gt;1280 x 720 = 1.777&lt;/li&gt;
&lt;li&gt;960 x 540 = 1.777&lt;/li&gt;
&lt;li&gt;854 x 480 = 1.779&lt;/li&gt;
&lt;li&gt;640 x 360 = 1.777&lt;/li&gt;
&lt;li&gt;1216 x 684 = 1.777 (android's navigation drawer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Wide 16:10&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;16:10 = 1.6&lt;/li&gt;
&lt;li&gt;2560 x 1600 = 1.6&lt;/li&gt;
&lt;li&gt;1920 x 1200 = 1.6&lt;/li&gt;
&lt;li&gt;1280 x 800 = 1.6&lt;/li&gt;
&lt;li&gt;800 x 480 = 1.666&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Non-wide 4:3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4:3 = 1.333&lt;/li&gt;
&lt;li&gt;2048 x 1536 = 1.333&lt;/li&gt;
&lt;li&gt;1600 x 1200 = 1333&lt;/li&gt;
&lt;li&gt;1024 x 768 = 1.333&lt;/li&gt;
&lt;li&gt;800 x 600 = 1.333&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Square&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1:1 = 1&lt;/li&gt;
&lt;li&gt;720 x 720 = 1 (Blackberry Classic 3,5")&lt;/li&gt;
&lt;li&gt;1440 x 1440 = 1 (Blackberry Passport 4,5")&lt;/li&gt;
&lt;li&gt;1080 x 1080 = 1&lt;/li&gt;
&lt;/ul&gt;</content><category term="list"></category><category term="reference"></category></entry><entry><title>Create swap file on Linux</title><link href="https://www.alexanderniki.name/articles/linux-create-swapfile.html" rel="alternate"></link><published>2017-11-20T11:30:00+03:00</published><updated>2017-11-20T11:45:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2017-11-20:/articles/linux-create-swapfile.html</id><summary type="html">&lt;p&gt;How to create swap file on linux&lt;/p&gt;</summary><content type="html">&lt;p&gt;Step-by-step guide about how to create a swap file on Linux. &lt;/p&gt;
&lt;p&gt;Before using the guide, login as the Root user. Or use sudo.&lt;/p&gt;
&lt;h2&gt;Step 1. Create storage file&lt;/h2&gt;
&lt;p&gt;Type the following command to create 512MB swap file (1024 * 512MB = 524288 block size):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dd if=/dev/zero of=/swapfile bs=1024 count=524288
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if=/dev/zero : read from /dev/zero file. /dev/zero is a special file in that provides as many null characters to build storage file called /swapfile&lt;/li&gt;
&lt;li&gt;of=/swapfile : read from /dev/zero write stoage file to /swapfile&lt;/li&gt;
&lt;li&gt;bs=1024 : read and write 1024 BYTES bytes at a time.&lt;/li&gt;
&lt;li&gt;count=524288 : copy only 523288 &lt;strong&gt;BLOCKS&lt;/strong&gt; input blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step 2. Set up a Linux swap area&lt;/h2&gt;
&lt;p&gt;Type the following command to set up a Linux swap area in a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# mkswap /swapfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setup correct file permission for security reasons, enter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# chown root:root /swapfile
# chmod 0600 /swapfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A world-readable swap file is a huge local vulnerability. The above command makes sure only root user can read/write to the file. Finally, activate /swapfile swap space immediately, enter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# swapon /swapfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To activate /swapfile after Linux system reboot, add entry to /etc/fstab file. Open this file using a text editor such as nano:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# nano /etc/fstab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Append the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/swapfile swap swap defaults 0 0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 3. Verify swap is activated&lt;/h2&gt;
&lt;p&gt;Simply use the free command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ free -m
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="howto"></category></entry><entry><title>Determine current CPU frequency on Linux</title><link href="https://www.alexanderniki.name/articles/linux-cpu-freq.html" rel="alternate"></link><published>2017-11-19T23:40:00+03:00</published><updated>2017-11-19T23:40:00+03:00</updated><author><name>Alexander Niki</name></author><id>tag:www.alexanderniki.name,2017-11-19:/articles/linux-cpu-freq.html</id><summary type="html">&lt;p&gt;How to determine current CPU frequency on Linux&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a little note about how to determine current CPU frequency in Linux.&lt;/p&gt;
&lt;h2&gt;Simple way&lt;/h2&gt;
&lt;p&gt;Open your terminal emulator and type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat /proc/cpuinfo &lt;span class="p"&gt;|&lt;/span&gt; grep MHz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that, you'll see something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cpu MHz     : 932.128
cpu MHz     : 1000.354
cpu MHz     : 998.950
cpu MHz     : 858.709
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;More complex way&lt;/h2&gt;
&lt;p&gt;First of all, install "cpufrequtils" package. For example, in Ubuntu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install cpufrequtils
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, just use "cpufreq-info" command.&lt;/p&gt;</content><category term="linux"></category><category term="howto"></category></entry></feed>